//		Однострочный комментарий
//		Подключение стандартных/внешних библиотек 

#include <cstdio>		// c standart input-output
#include <iostream>		// input-output stream




//		Функция main - старт программы в с/c++
int main() {

	//	Объявление переменных
	int ia;
	float fa;
	double fd;
	char ca;
	const char* str;
	int array[10];	

	//	Инициализация переменных
	ia = 0;
	fa = fd = 3.14;
	ca = '&';
	str = "Test string";

	// 	Объявление и инициализация в одном месте
	int ih = 0xabcd;		// hex int
	int io = 0123;			// oct int
	int ib = 0b1001;		// bin int

/*		 
 *		Многострочный комментарий
 *
 *		При объявлении переменных в памяти компьютера выделяется 
 *		место - некоторое количество байт памяти.
 *
 *		При инициализации переменных в эту память записываются 
 *		числа.
 *
 *		В c/c++ практически никогда не происходит инициализация
 *		по умолчанию ->
 *		   НЕ ИСПОЛЬЗУЙТЕ НЕПРОИНИЦИАЛИЗИРОВАННЫЕ ПЕРЕМЕННЫЕ
 *
 *		---------------------------------------------------------
 *
 *		Переменные в c/c++ живут только внутри фигурных скобок.
 *		Исключение - глобальные переменные.
 *
 *		Объем внутри скобок называется scope.
 *		Вне scope-а про переменную ничего неизвестно
 *
 *		Если один scope вложен в другой - принято его содержимое
 *		сдвигать на один таб вправо
 *
 */

	// Пример scope-а
	{
		int a=21;
		// Вывод на экран строки "a = 21" и перенос курсора
		// Функция printf() - внешняя, для ее использования
		// нужно подключать библиотеку cstdio
		printf("a = %d\n",a);
	}
	
	// printf("a = %d\n",a);
	// Ошибка компиляции: обращение к неизвестной переменной
	// error: ‘a’ was not declared in this scope

	
///////////////////////////////////////////////////////////////////

/*
 *		Функции всегда имеют вид 
 *		functionName(int arg1, float arg2, const char* arg3)
 *
 *		То что внутри скобок - аргументы функции
 *		В том месте где функция вызвана - она будет заменена 
 *		на возвращаемое ей значение
 *
 *		Есть функции, которые ничего не возвращают
 */

	int s = -100;	
	int u = abs(s);

	// 	Более сложный объект std::cout позволяет выводить
	// 	информацию на stdout в C++
	//	В C такого нету
	
	std::cout << "Size of int:\t" << sizeof(int) << std::endl;
	std::cout << "Size of float:\t" << sizeof(float) << std::endl;
	std::cout << "Size of double:\t" << sizeof(double) << std::endl;
	std::cout << "Size of char:\t" << sizeof(char) << std::endl;
		
	// Конец программы - слово return - возврат какого-либо 
	// значения	
	return 0;
	
	printf("Этот код никогда не будет выполнен\n");

}






